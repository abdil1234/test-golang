// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/domain/repositories/game_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/abdil1234/test-golang/internal/app/domain/repositories/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIGameRepository is a mock of IGameRepository interface.
type MockIGameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGameRepositoryMockRecorder
}

// MockIGameRepositoryMockRecorder is the mock recorder for MockIGameRepository.
type MockIGameRepositoryMockRecorder struct {
	mock *MockIGameRepository
}

// NewMockIGameRepository creates a new mock instance.
func NewMockIGameRepository(ctrl *gomock.Controller) *MockIGameRepository {
	mock := &MockIGameRepository{ctrl: ctrl}
	mock.recorder = &MockIGameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGameRepository) EXPECT() *MockIGameRepositoryMockRecorder {
	return m.recorder
}

// Gets mocks base method.
func (m *MockIGameRepository) Gets() ([]models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets")
	ret0, _ := ret[0].([]models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockIGameRepositoryMockRecorder) Gets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockIGameRepository)(nil).Gets))
}

// Insert mocks base method.
func (m *MockIGameRepository) Insert(game models.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIGameRepositoryMockRecorder) Insert(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIGameRepository)(nil).Insert), game)
}
